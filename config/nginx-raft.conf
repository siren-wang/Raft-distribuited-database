events {
    worker_connections 1024;
}

http {
    upstream raft_cluster {
        # Simple round-robin load balancing
        # In production, you'd want sticky sessions or leader-aware routing
        server raft-node1:8001 max_fails=1 fail_timeout=10s;
        server raft-node2:8002 max_fails=1 fail_timeout=10s;
        server raft-node3:8003 max_fails=1 fail_timeout=10s;
    }

    server {
        listen 80;
        
        # Client read/write endpoints
        location /kv/ {
            proxy_pass http://raft_cluster;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # Handle leader redirects
            proxy_intercept_errors on;
            error_page 421 = @find_leader;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }
        
        # Raft status endpoint
        location /raft/status {
            proxy_pass http://raft_cluster;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
        }
        
        # Leader redirect handler
        location @find_leader {
            # In production, implement proper leader discovery
            # For now, just retry with round-robin
            proxy_pass http://raft_cluster;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }
}