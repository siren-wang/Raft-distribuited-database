version: '3.8'

services:
  # PostgreSQL instances for each Raft node
  postgres-node1:
    image: postgres:15-alpine
    container_name: kvstore-postgres-node1
    environment:
      POSTGRES_USER: siren
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: kvstore_node1
    volumes:
      - postgres_node1_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U siren -d kvstore_node1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - raft-network

  postgres-node2:
    image: postgres:15-alpine
    container_name: kvstore-postgres-node2
    environment:
      POSTGRES_USER: siren
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: kvstore_node2
    volumes:
      - postgres_node2_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U siren -d kvstore_node2"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - raft-network

  postgres-node3:
    image: postgres:15-alpine
    container_name: kvstore-postgres-node3
    environment:
      POSTGRES_USER: siren
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: kvstore_node3
    volumes:
      - postgres_node3_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U siren -d kvstore_node3"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - raft-network

  # Raft nodes
  raft-node1:
    build:
      context: .
      dockerfile: docker/Dockerfile.raft
    container_name: raft-node1
    ports:
      - "8001:8001"
    environment:
      NODE_ID: node1
      NODE_PORT: 8001
      CLUSTER_CONFIG: '{"node1":"raft-node1:8001","node2":"raft-node2:8002","node3":"raft-node3:8003"}'
      DB_HOST: kvstore-postgres-node1
      DB_PORT: 5432
      DB_NAME: kvstore_node1
      DB_USER: siren
      DB_PASSWORD: pass
    volumes:
      - raft_node1_state:/app/raft_state
      - raft_node1_wal:/app/raft_wal
    depends_on:
      postgres-node1:
        condition: service_healthy
    networks:
      - raft-network

  raft-node2:
    build:
      context: .
      dockerfile: docker/Dockerfile.raft
    container_name: raft-node2
    ports:
      - "8002:8002"
    environment:
      NODE_ID: node2
      NODE_PORT: 8002
      CLUSTER_CONFIG: '{"node1":"raft-node1:8001","node2":"raft-node2:8002","node3":"raft-node3:8003"}'
      DB_HOST: kvstore-postgres-node2
      DB_PORT: 5432
      DB_NAME: kvstore_node2
      DB_USER: siren
      DB_PASSWORD: pass
    volumes:
      - raft_node2_state:/app/raft_state
      - raft_node2_wal:/app/raft_wal
    depends_on:
      postgres-node2:
        condition: service_healthy
    networks:
      - raft-network

  raft-node3:
    build:
      context: .
      dockerfile: docker/Dockerfile.raft
    container_name: raft-node3
    ports:
      - "8003:8003"
    environment:
      NODE_ID: node3
      NODE_PORT: 8003
      CLUSTER_CONFIG: '{"node1":"raft-node1:8001","node2":"raft-node2:8002","node3":"raft-node3:8003"}'
      DB_HOST: kvstore-postgres-node3
      DB_PORT: 5432
      DB_NAME: kvstore_node3
      DB_USER: siren
      DB_PASSWORD: pass
    volumes:
      - raft_node3_state:/app/raft_state
      - raft_node3_wal:/app/raft_wal
    depends_on:
      postgres-node3:
        condition: service_healthy
    networks:
      - raft-network

  # Optional: Load balancer for client requests
  nginx:
    image: nginx:alpine
    container_name: raft-lb
    ports:
      - "9000:80"
    volumes:
      - ./config/nginx-raft.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - raft-node1
      - raft-node2
      - raft-node3
    networks:
      - raft-network

volumes:
  postgres_node1_data:
  postgres_node2_data:
  postgres_node3_data:
  raft_node1_state:
  raft_node1_wal:
  raft_node2_state:
  raft_node2_wal:
  raft_node3_state:
  raft_node3_wal:

networks:
  raft-network:
    driver: bridge